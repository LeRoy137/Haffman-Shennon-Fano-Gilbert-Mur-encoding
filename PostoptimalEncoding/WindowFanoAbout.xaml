<Window x:Class="PostoptimalEncoding.WindowFanoAbout"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:PostoptimalEncoding"
        mc:Ignorable="d"
        Title="Алгоритм Фано" Height="450" Width="800">
    <Window.Background>
        <SolidColorBrush Color="#FF9BB4DE"/>
    </Window.Background>
    <Window.Resources>
        <Style TargetType="Expander">
            <Setter Property="FontWeight" Value="DemiBold"></Setter>
            <Setter Property="FontSize" Value="16"></Setter>
        </Style>
        <Style x:Key="textDescription" >
            <Setter Property="TextBlock.FontSize" Value="14"></Setter>
            <Setter Property="TextBlock.TextWrapping" Value="WrapWithOverflow"></Setter>
            <Setter Property="TextBlock.FontWeight" Value="Normal"></Setter>
            <Setter Property="TextBlock.TextWrapping" Value="Wrap"></Setter>
        </Style>
    </Window.Resources>
    <Border BorderThickness="2" BorderBrush="#FF531AB6" Margin="5">
        <Grid Background="#FFE3EBEE">
            <Grid Margin="5">
                <ScrollViewer VerticalScrollBarVisibility="Visible">
                    <StackPanel>
                        <Grid>
                            <StackPanel>
                                <TextBlock FontSize="16" FontWeight="DemiBold">Описание:</TextBlock>
                                <TextBlock Name="txtBlockDescription" TextWrapping="Wrap" Style="{StaticResource textDescription}">
                                    Метод Фано построения префиксного почти оптимального кода заключается в следующем. Упорядоченный по убыванию вероятностей список букв алфавита источника делится на две части так, чтобы суммы вероятностей букв, входящих в эти части, как можно меньше отличались друг от друга. Буквам первой части приписывается 0, а буквам из второй части – 1. Далее также поступают с каждой из полученных частей. Процесс продолжается до тех пор, пока весь список не разобьется на части, содержащие по одной букве.
                                </TextBlock>
                            </StackPanel>
                        </Grid>
                        <Expander Header="Алгоритм">
                            <StackPanel>
                                <TextBlock Style="{StaticResource textDescription}">
                                    1. Символы первичного алфавита m1 выписывают по убыванию вероятностей.
                                </TextBlock>
                                <TextBlock Style="{StaticResource textDescription}">
                                    2. Символы полученного алфавита делят на две части, суммарные вероятности символов которых максимально близки друг другу.
                                </TextBlock>
                                <TextBlock Style="{StaticResource textDescription}">
                                    3. В префиксном коде для первой части алфавита присваивается двоичная цифра «0», второй части — «1».
                                </TextBlock>
                                <TextBlock Style="{StaticResource textDescription}">
                                    4. Полученные части рекурсивно делятся и их частям назначаются соответствующие двоичные цифры в префиксном коде.
                                </TextBlock>
                                <TextBlock Style="{StaticResource textDescription}">
                                    Полученные части рекурсивно делятся и их частям назначаются соответствующие двоичные цифры в префиксном коде.
Когда размер подалфавита становится равен нулю или единице, то дальнейшего удлинения префиксного кода для соответствующих ему символов первичного алфавита не происходит, таким образом, алгоритм присваивает различным символам префиксные коды разной длины. На шаге деления алфавита существует неоднозначность, так как разность суммарных вероятностей может быть одинакова для двух вариантов разделения (учитывая, что все символы первичного алфавита имеют вероятность больше нуля).
                                </TextBlock>
                                <Viewbox Height="200">
                                    <Image Margin="10" Source="Resources/Fano_alg.png">

                                    </Image>
                                </Viewbox>
                            </StackPanel>
                        </Expander>
                        <Expander Header="Пример">
                            <StackPanel>
                                <TextBlock Name="txtBlockExample" Style="{StaticResource textDescription}">
                                Пусть дан алфавит A={a1, a2, a3, a4, a5, a6} с вероятностями p1=0.36, p2=0.18, p3=0.18, p4=0.12, p5=0.09, p6=0.07. Построенный код приведен в таблице:
                                </TextBlock>
                                <DataGrid FontSize="14" FontWeight="Normal" HorizontalAlignment="Center" AutoGenerateColumns="False" HorizontalGridLinesBrush="DarkGray"
    RowBackground="LightGray" AlternatingRowBackground="White">

                                    <DataGrid.Items>
                                        <local:Row Col1="a1" Col2="0.36" Col3="0.09" Col4="2" Col5="0 0" />
                                        <local:Row Col1="a2" Col2="0.18" Col3="0.27" Col4="2" Col5="0 1" />
                                        <local:Row Col1="a3" Col2="0.18" Col3="0.54" Col4="2" Col5="1 0" />
                                        <local:Row Col1="a4" Col2="0.12" Col3="0.755" Col4="3" Col5="1 1 0" />
                                        <local:Row Col1="a5" Col2="0.09" Col3="0.835" Col4="4" Col5="1 1 1 0" />
                                        <local:Row Col1="a6" Col2="0.07" Col3="0.94" Col4="4" Col5="1 1 1 1" />
                                    </DataGrid.Items>
                                    <DataGrid.Columns>
                                        <DataGridTextColumn Header="ai" Binding="{Binding Path=Col1}" Width="auto" />
                                        <DataGridTextColumn Header="Pi" Binding="{Binding Path=Col2}" Width="auto" />
                                        <DataGridTextColumn Header="Кодовое слово" Binding="{Binding Path=Col5}" Width="auto" />
                                        <DataGridTextColumn Header="Li" Binding="{Binding Path=Col4}" Width="auto" />
                                    </DataGrid.Columns>
                                </DataGrid>
                            </StackPanel>
                        </Expander>
                    </StackPanel>
                </ScrollViewer>
                <Button FontWeight="DemiBold" HorizontalAlignment="Right"  VerticalAlignment="Bottom" Margin="5,5,20,10" x:Name="btnOk" Height="50" Width="50" Content="Ok" Click="btnOk_Click" Background="#FFA0A6EA" BorderBrush="#FF6A3497">

                </Button>
            </Grid>
        </Grid>
    </Border>

</Window>
